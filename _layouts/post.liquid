---
layout: default
---
{% assign year = page.date | date: '%Y' %}
{% assign tags = page.tags | join: '' %}
{% assign categories = page.categories | join: '' %}
{% assign url_beginning = page.url | slice: 0, 6 %}

{% if page._styles %}
  <!-- Page/Post style -->
  <style type="text/css">
    {{ page._styles }}
  </style>
{% endif %}

<div class="post">
  <header class="post-header">
    <h1 class="post-title">{{ page.title }}</h1>
    <p class="post-meta">
      Created on {{ page.date | date: '%B %d, %Y' }}
      {% if page.author %}by {{ page.author }}{% endif %}
      {% if page.last_updated %}, last updated on {{ page.last_updated | date: '%B %d, %Y' }}{% endif %}
      {% if page.meta %}â€¢ {{ page.meta }}{% endif %}
    </p>
  </header>

  <article class="post-content">
    {% if page.toc and page.toc.beginning %}
      <div id="table-of-contents">
        {% toc %}
      </div>
      <hr>
    {% endif %}
    <div id="markdown-content">
      {{ content }}
    </div>
  </article>

  {% if page.citation %}
    {% include citation.liquid %}
  {% endif %}
</div>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const images = document.querySelectorAll("#markdown-content img");

  for (const [index, img] of images.entries()) {
    try {
      const url = new URL(img.src);
      if (!url.hostname.includes("images.mostlyrocks.com")) continue;

      const pathParts = url.pathname.split("/");
      const filename = pathParts.pop();
      const folder = pathParts.join("/");
      const v = Date.now();

      const src1200 = `${url.origin}${folder}/thumbs/1200/${filename}?v=${v}`;
      const fallback = `${url.origin}${folder}/${filename}?v=${v}`;

      img.setAttribute("src", src1200);
      
      // Only add lazy loading for images after the first 4
      if (index >= 4) {
        img.setAttribute("loading", "lazy");
      }

      img.onerror = () => {
        console.warn(`Thumbnail not found, falling back: ${src1200}`);
        img.src = fallback;
      };
    } catch (e) {
      console.warn("Could not process image:", img, e);
    }
  }
});
</script>
